from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from datetime import datetime, timedelta
import os
import sqlite3
import configparser
import time
import threading
import requests
import logging
from fastapi.middleware.cors import CORSMiddleware

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
config = configparser.ConfigParser()
config.read("config.ini")

try:
    DATABASE = config["database"]["path"]
    ALLOWED_DELAY = timedelta(seconds=int(config["monitoring"]["allowed_delay"]))
    CHECK_INTERVAL = int(config["monitoring"]["check_interval"])
    AUTHORIZED_KEYS = config["security"]["api_keys"].split(",")
    CHAT_ID = config["security"]["chat_id"]
except KeyError as e:
    raise ValueError(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)


app = FastAPI(
    title="Status Notification Service",
    description="API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º",
    version="0.1",
    redoc_url=None,
    docs_url=None,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:8000",  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        "http://127.0.0.1:8000",  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
        "*",  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é)
    ],
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ HTTP-–º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)


def get_db_connection():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn


# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
class StatusUpdate(BaseModel):
    program_name: str
    api_key: str


@app.on_event("startup")
def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    conn = get_db_connection()
    conn.execute(
        """
        CREATE TABLE IF NOT EXISTS program_status (
            program_name TEXT PRIMARY KEY,
            last_update DATETIME,
            notified INTEGER DEFAULT 0
        )
        """
    )
    conn.commit()
    conn.close()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=monitor_programs, daemon=True).start()


@app.post("/update_status")
async def update_status(update: StatusUpdate):
    """
    Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
    if update.api_key not in AUTHORIZED_KEYS:
        raise HTTPException(status_code=401, detail="Unauthorized")

    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO program_status (program_name, last_update, notified) VALUES (?, ?, 0) "
            "ON CONFLICT(program_name) DO UPDATE SET last_update = ?",
            (update.program_name, datetime.now(), datetime.now()),
        )
        conn.commit()
        logging.info(f"Status for {update.program_name} updated")
        return {"message": f"Status for {update.program_name} updated"}
    finally:
        conn.close()


@app.get("/check_status")
async def check_status():
    """
    Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º.
    """
    conn = get_db_connection()
    try:
        now = datetime.now()
        cursor = conn.execute("SELECT program_name, last_update FROM program_status")
        inactive_programs = [
            row["program_name"]
            for row in cursor.fetchall()
            if now - datetime.fromisoformat(row["last_update"]) > ALLOWED_DELAY
        ]
        return {
            "inactive_programs": inactive_programs,
            "all_programs": [
                row["program_name"]
                for row in conn.execute("SELECT program_name FROM program_status")
            ],
        }
    finally:
        conn.close()


def send_telegram_message(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def monitor_programs():
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º.
    """
    while True:
        time.sleep(CHECK_INTERVAL)
        try:
            now = datetime.now()
            conn = get_db_connection()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            cursor = conn.execute(
                "SELECT program_name, last_update, notified FROM program_status"
            )
            programs = cursor.fetchall()

            for row in programs:
                program_name = row["program_name"]
                last_update = datetime.fromisoformat(row["last_update"])
                notified = row["notified"]

                print(now - last_update > ALLOWED_DELAY)
                print(notified)
                if now - last_update > ALLOWED_DELAY:
                    if not notified:
                        send_telegram_message(
                            f"üî¥ –û–±—ä–µ–∫—Ç {program_name} –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å‚ÄºÔ∏è"
                        )
                        conn.execute(
                            "UPDATE program_status SET notified = 1 WHERE program_name = ?",
                            (program_name,),
                        )
                else:
                    if notified:
                        send_telegram_message(f"üü¢ –û–±—ä–µ–∫—Ç {program_name} –≤ —Ä–∞–±–æ—Ç–µ ‚úÖ")
                        conn.execute(
                            "UPDATE program_status SET notified = 0, last_update = ? WHERE program_name = ?",
                            (datetime.now(), program_name),
                        )

            conn.commit()
            conn.close()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            send_telegram_message(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


# if __name__ == "__main__":
#     import uvicorn

#     uvicorn.run(app, host="0.0.0.0", port=5000)
